import { test, expect } from '@playwright/test'

test.describe('RP test codegen', () => {
  test('rename filter', async ({ page }) => {
    const newName = `1YlODeX2t8w5Lw New filter via API upd${Math.floor(Math.random() * 1000)}`
    await page.goto('https://reportportal.epam.com/ui/#login', { timeout: 60000 })
    await page.getByPlaceholder('Login').click()
    await page.getByPlaceholder('Login').fill('yauhenuser')
    await page.getByPlaceholder('Password').click()
    await page.getByPlaceholder('Password').fill('Absolutepassword001')
    await page.getByRole('button', { name: 'Login', exact: true }).click()
    await page.locator('a').filter({ hasText: 'Filters' }).click()
    await page.locator('span[class^="filterName__name"]').first().hover()
    await page.locator('span[class^="filterName__pencil-icon"] > svg').first().click()
    await page.getByPlaceholder('Enter filter name').click()
    await page.getByPlaceholder('Enter filter name').fill(newName)
    await page.locator('.CodeMirror').click()
    await page.keyboard.press('Control+A')
    await page.getByRole('textbox').nth(2).fill(` upd${Math.floor(Math.random() * 1000)}`)
    await page.getByRole('button', { name: 'Update' }).click()
    await page.getByRole('button', { name: 'Update' }).waitFor('hidden')
    await expect(page.locator('span[class^="filterName__name"]').first()).toHaveText(newName)
  })
})
